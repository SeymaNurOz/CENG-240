# -*- coding: utf-8 -*-
"""Workbook-2(w5-6)-condition-loop.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SFm0trdnM22FTc45y073HejhUWB740GI
"""



#2.1. Letter Grade
grade= int(input())

if grade >= 90:
    print("AA")
elif grade>=85:
    print("BA")
elif grade>=80:
    print("BB")
elif grade>=75:
    print("CB")
elif grade>=70:
    print("CC")
elif grade>=65:
    print("DC")
elif grade>=60:
    print("DD")
elif grade>=50:
    print("FD")
else:
    print("FF")

#2.2.Even or Odd
num =int(input())
first_digit=num//100
if num%2==0 and first_digit%2==0:
    print("EVEN")
elif num%2==1 and first_digit%2==0:
    print("odd even")
elif num%2==0 and first_digit%2==1:
    print("even odd")
else:
    print("ODD")

#2.3. Ticket Price 
ages = eval(input())
sum=0
for age in ages:
    if age>60:
        sum=sum+30
    elif age>25:
        sum=sum+90
    elif age>10:
        sum=sum+60
    else:
        sum=sum+30
print(sum)

#2.4. Orders from Abroad
num = int(input())

tax=0
for i in range(num):
    price=int(input())
    if price<=100:
        tax+=0
    elif price<=1000:
        tax+=price*0.1
    else:
        tax+=price*0.2
print("{:.1f}".format(tax))

#2.5. Winner Team in Board Game
matrix = eval(input())
sum = 0

for sıra in matrix:
    # print(sıra)
    for eleman in sıra:
        # print(eleman)
        if eleman<0:
            sum+= -1*eleman
print(sum)

#2.6. Apple Tree Garden
apples = eval(input())
harvest_list=[]
sum=0
for row in apples:
    for i in range(len(row)):
        sum += row[i]
    harvest_list.append(sum)
    sum=0
#print(harvest_list)
max_harvest=max(harvest_list)
for i in range(len(harvest_list)):
    if max_harvest == harvest_list[i]:
        k=i
print(apples[k])
##KITAP COZUMU
# M, N = len(G), len(G[0])    # dimensions of matrix
# max_row_index = 0
# max_row_sum = 0

# for r in range(M):
#     row_sum = 0
#     for c in range(N):
#         row_sum += G[r][c]

#     if row_sum > max_row_sum:
#         max_row_sum = row_sum
#         max_row_index = r

# max_row = G[max_row_index]
# print(max_row)

#2.7. Exercise: New Apple Garden Tree
G = eval(input())
num_row=len(G)
num_column=len(G[0])
max_column=0
max_column_no=0
for j in range(num_column):
    sum=0
    for i in range(num_row):   
        sum=sum+(G[i][j])
    if sum>max_column:
        max_column=sum
        max_column_no=j
print(j)
result_list=[]
for i in range(num_row):
    result_list.append(G[i][max_column_no])
print(result_list)

#2.8. Repeated Strings
string=input()
le=len(string)
liste= list(string)
le_2=int(le/2)
if le%2==1:
    print("Error")
elif liste[:le_2]==liste[le_2:]:
    print("Yes")
else:
    print("no")

#2.9. Exercise: Office Olympics 
wins_list = eval(input())
grup=[]
top_name=[]

for i in range(len(wins_list)):
    grup.append(wins_list[i][1])
x=sorted(grup)
top_num=x[-3:]

for i in range(len(wins_list)):
    for j in range(len(top_num)):
        if top_num[j]==wins_list[i][1]:
            top_name.append(wins_list[i][0])
top_name=top_name[::-1]
print(top_name) 
top_num

#2.10. Exercise: Good Old Tiling
n = int(input())
m = int(input())
i=min(m,n)
while i>0:
    if m%i==0 and n%i==0:
        print(i)
        break
    i=i-1

#2.11. Exercise: Triangle
edge1=int(input())
edge2=int(input())
edge3=int(input())
big=max(edge1,edge2,edge3)
sum=edge1+edge2+edge3
if (sum-big)>big:
    print("YES")
else:
    print("NO")

#2.12. Exercise: Fizz Buzz
number=int(input())

output = ""
for i in range(1,number+1):
    if i%3==0 and i%5==0:
        output=output+"  "+str("FizzBuzz")
    elif i%3==0:
        output=output+"  "+str("Fizz")
    elif i%5==0:
        output=output+"  "+str("Buzz")
    else:
        output=output+"  "+str(i)
print(output)
#Hint: The sample i/o given below is printed by calling the  print()  function with the additional argument end as '\t' (e.g. print("Fizz", end='\t')) for the sake of readability.
#HINT I ANLAMADIM

#2.13. Binary Planet
num=int(input())
binary=""
for i in range(8):
    rmd=int(num%2)
    binary=str(rmd)+binary
    num=(num-rmd)/2

print(binary)

#2.14. Run-length Encoding
text=input()
text_lis=list(text)
count=0
letter=text_lis[0]
result=""


for i in range(len(text_lis)):
    if text_lis[i]==letter:
        count=count+1
    else:
        result=result+str(count)+str(letter)
        letter=text_lis[i]
        count=1
result=result+str(count)+str(letter)

print(result)

#2.15. Exercise: Connect Four
length=int(input())
r1=list(input())
r2=list(input())
r3=list(input())
r4=list(input())

matrix=[r1,r2,r3,r4]
print(matrix)
check=False

#sıra için
for i in range(length):
    ref=matrix[i][0]
    control=0
    for j in range(length):
        if matrix[i][j]==ref:
            control+=1
        if control==length:check=True


            

#column
for j in range(length):
    ref=matrix[0][j]
    control=0
    for i in range(length):
        if matrix[i][j]==ref:
            control+=1
        if control==length:check=True

#çapraz
for i in range(length):
    ref=matrix[0][0]
    control=0
    if ref==matrix[i][i]:
        control+=1
    if control==length:check=True

# diğer çapraz
for i in range(length):
    ref=matrix[0][length-1]
    control=0
    if ref==matrix[i][length-i-1]:
        control+=1
    if control==length:check=True





if check==True:
    print("yes")
elif check==False:
    print("no")

#2.16. Obsessed Tiler 
T=eval(input())
length=len(T)
symmetry=True

for i in range(0,length):
    for j in range(0,length):
        print(T[i][j])
        if T[i][j] != T[length-i-1][length-j-1]:
            print(T[i][j],T[i][length-j-1])
            symmetry=False
        if symmetry==False : break


if symmetry==True:print("True")
elif symmetry==False:print("False")

#2.17. Matrix Multiplication
A=[[12, 7, 3], [4, 5, 6], [7, 8, 9]]
B=[[5, 8, 1, 2], [6, 7, 3, 0], [4, 5, 9, 1]]

m=len(A)
n=len(B)
p=len(B[0])
sum=0
result_matrix=[[0]*p]*m
#m-p
for i in range(0,m):
    for j in range(0,p):
        
        for k in range(n):
            sum=sum+A[i][k]*B[k][j]
            # print(sum)
            result_matrix[i][j]=sum
        sum=0
        # print(result_matrix)


print(result_matrix)

#2.18. Exercise: Incomplete Data
R = eval(input())
M=len(R)
N=len(R[0])
count=0
sum=0
for i in range(M):
    for j in range(N):
        
        
        if R[i][j]=="NaN":
            count+=1
        else:
            sum+=R[i][j]

avarage=sum/(M*N-count)
print(round(avarage,3))

#2.19. Emotional Chatbot 
# text=input()
text=input()
list_text=text
length=len(list_text)

for i in range(length//2) :

    if list_text[0:2]=="uh":
        list_text=list_text[2:]
    
if list_text=="u":
    print( "Are you sad, hooman?")
elif list_text=="":
    print("Are you sad, hooman?")
else:print("I am so sad, hooman.")

#2.20. Minesweeper
B = eval(input())

M=len(B)
N=len(B[0])

for i in range(M):
    for j in range(N):
        count=0
        if  B[i][j]=="m":
            pass
        
        else:
            if i>0 and B[i-1][j]=="m": count+=1
            if i<M-1 and B[i+1][j]=="m": count+=1
            if j>0 and B[i][j-1]=="m":count+=1
            if j<N-1 and B[i][j+1]=="m":count+=1
            B[i][j]=count

print(B)

#2.21. Exercise: Original Minesweeper
B = eval(input())

M=len(B)
N=len(B[0])

for i in range(M):
    for j in range(N):
        count=0
        if  B[i][j]=="m":
            pass
        
        else:
            if i>0 and B[i-1][j]=="m": count+=1
            if i<M-1 and B[i+1][j]=="m": count+=1
            if j>0 and B[i][j-1]=="m":count+=1
            if j<N-1 and B[i][j+1]=="m":count+=1
            if i>0 and j>0 and B[i-1][j-1]=="m": count+=1
            if i>0 and j<N-1 and B[i-1][j+1]=="m": count+=1
            if i<M-1 and j>0 and B[i+1][j-1]=="m": count+=1
            if i<M-1 and j<N-1 and B[i+1][j+1]=="m": count+=1

            B[i][j]=count

print(B
      )

#2.22. N-Queen 
B= eval(input())
N =len(B)
attack=False

for i in range(N):
    for j in range(N):

        if B[i][j]=="q":
            if i>0  and B[i-1][j]=="q":attack=True
            if i<N-1  and B[i+1][j]=="q":attack=True
            if j>0  and B[i][j-1]=="q":attack=True
            if j<N-1  and B[i][j+1]=="q":attack=True


if attack==False:print("YES")
else:print("NO")



#2.24. Helping Deroro Quickly3