# -*- coding: utf-8 -*-
"""Workbook3  (w7-8)-functions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bFk3JVgpidu_Ij0-_-8jjlwCzSC0RtzG
"""





#3.1. Best Food 
def best_food(text):
    if text=="HEADS":return "CALZONES"
    elif text=="TAILS": return "WAFFLES"

print(best_food("TAILS"))

#3.2. Temperature Conversion
def convert(temp_num,temp_type):
    if temp_type=="C":
        F= 180*temp_num/100+32
        return F
    elif temp_type=="F":
        C= (temp_num-32)*100/180
        return C 
    else:
        return "invalid unit"

print(convert(212, 'F'))

print(convert(212, 'F'))
print(convert(6,'C'))

#3.3. Exercise: Leslie’s Parks
def to_be_built(for_,against):
    if for_>=2*against:
        return"YES"
    else: return"NO"

print(to_be_built(27,13))

#3.4. Discriminant Problem
def has_real_roots(a,b,c):
    delta= b**2-4*a*c
    if delta<0: return "False"
    else: return "True"
print(has_real_roots(1, -4, 4))
print(has_real_roots(1, -2, 4))

#3.5. Exercise: Finding Median
def find_median(grade_list):
    sorted_list=sorted(grade_list)
    length=len(sorted_list)
    if length%2==1:
        return sorted_list[(length-1)//2]
    else: 
        avarage_mid=(sorted_list[length//2]+sorted_list[(length//2)-1])/2
        return int(avarage_mid)




print(find_median([72,32,49,20,33]))
print(find_median([27,48,9,63,99,61,33,80,43,84,39,46,40,46,16,55,69,43,11,57]))

#3.6. Exercise: Middle Point
def middle_point(tupple_1,tupple_2):
    mid_x=(tupple_1[0]+tupple_2[0])/2
    mid_y=(tupple_1[1]+tupple_2[1])/2
    return(mid_x,mid_y)


print(middle_point((1.0, 2.0), (4.0, 4.0)))
print(middle_point((-4.0, 2.0), (3.0, -4.0)))

#3.7. Sampled Average
def avarage(num_list):
    sum=0
    for num in num_list:
        sum+= num 
    return sum/len(num_list)

def sampled_average(num_list,av_target):
    check=False
    for i in range(len(num_list)):
        new_list= num_list[:i]+num_list[i+1:]
        if avarage(new_list)==av_target:
            check=True
    if check==True: return "yes"
    else: return "no"


print(sampled_average([1,2,3,10], 2))
print(sampled_average([1,3], 2))

#3.8. Andy’s Songs
def andys_songs(song_list,mood):
    count=0
    for song in song_list:
        if mood>=song:
            count+=1
    return count


print(andys_songs([2, 7, 12, 5, 1, 0, 6, 8], 5))
print(andys_songs([4, 8, 15, 16, 23, 42, 108, 271, 49, 88], 55))

#3.9. Exercise: Bankruptcy Countdown
def countdown(money,payment_list):
    sum=0
    for each in payment_list:
        sum+=each
    return sum


print(countdown(2000, [2900, 1000, 400, 23000]))


print(countdown(125000, [7000, 4500, 750, 150, 7100, 1000]))

#3.10. City Sushi
def total_price(sushi_list,range_start,range_stop):
    price=0
    for i in range(range_start-1,range_stop-1):
        price+=sushi_list[i]
    return price



print(total_price([1, 5, 2, 6, 12, 5, 23, 15], 2, 6))

print(total_price([7, 7, 7, 5, 6, 3, 5, 7, 8], 1, 9))

#3.11. Health Bar
def health_bar(base,current,damage):
    kalan=current-damage
    if kalan > 0 :
        return "X"*kalan+"_"*(base-kalan)
    else: 
        return "_"*base


print(health_bar(11, 11, 4))
print(health_bar(8, 2, 6))

#3.12. Exercise: Palindrome
def is_palindrome(text):
    reverse=text[::-1]
    if text==reverse:
        return "True"
    else: return "False"

print(is_palindrome("ilsa"))
print(is_palindrome("dammitimmad"))

#3.13. Range of
def range_of(my_list):
    max_item=my_list[0]
    min_item=my_list[0]
    for item in my_list:
        if item>max_item:
            max_item=item
        if item<min_item:
            min_item=item
    r=max_item-min_item
    return r
print(range_of([2,2]))

#3.14. Exercise: Increment List
def increment_list(my_list):
    new_list=[]
    for i in my_list:
        y=i+1
        new_list+=[y]
    return new_list

a = [1, 2, 3, 10, 15]
print(increment_list(a)) 
print(a)

#3.15. Even Number of Customers
count=0

def incoming():
    global count
    count+=1

def outgoing():
    global count
    count-=1

def even_customers():
    global count
    if count%2==0:return True
    else: return False

incoming()
incoming()
incoming()
print(even_customers())

outgoing()
print(even_customers())

#3.16. Substring Count

##OLMADI-RECURSIVE
# count=0
# def substring_count(big_str,sub_str):
#     global count
#     x=len(sub_str)
#     if sub_str == big_str[0:x]:
#         count+=1
#     substring_count(big_str[1::],sub_str)
#     if big_str =="":
#         return count

def substring_count(big_str,sub_str):
    count=0
    len_sub=len(sub_str)
    len_big=len(big_str)
    for i in range(0,len_big-len_sub+1):
        if sub_str==big_str[i:i+len_sub]:
            count+=1
    return count

print(substring_count("ababa","aba"))

#3.17. Exercise: Reduce Number
def reduce_number(number):
    sum=0
    num_list=list(str(number))
    for item in num_list:
        sum+=int(item)
    if sum<10: return sum
    elif sum>=10:
        return reduce_number(sum)


print(reduce_number(19999999999999))

#3.19. My Range

def my_range(start,stop,step):
    new_list=[]
    i=start
    while i<stop:
        new_list+=[i]
        i=i+step
    return new_list

print(my_range(3, 10,1))

#3.19. Even Numbers
def is_even(number):
    if number==0: return "True"
    elif number==1: return "False"
    else:
        x=number-2
        return is_even(x)

print(is_even(0))

#3.20. First Non-Prime
[2,3,4,7]
num=7
def prime(num):
    if num==2: return True
    check=True
    for i in range(num//2+1,1,-1):
        if num%i==0: check= False
    return check        
def find_first_non_prime(num_list):
    for item in num_list:
        if prime(item)==False: return item
    return False
         
print(find_first_non_prime([2,3,51,19]))

#3.21. The Game of Divisors
def divisor(num):
    count=0
    i=num
    while i>0:
        if num%i==0:count+=1
        i-=1
    return count



def winner(N,O):
    if divisor(N)>divisor(O):return "Nazif"
    elif divisor(N)<divisor(O): return "Osman"
    else:return "Draw"


print(winner(120, 144))
print(winner(191, 190))
print(winner(4, 121))

#3.23. Exercise: Perfect Number
def div_list(num):
    div_list=[]
    i=num-1
    while i>0:
        if num%i==0:
            div_list+=[i]
        i-=1
    return div_list
def is_perfect(num):
    d_list=div_list(num)
    total=0
    for i in d_list:
        total+=i
    if total== num: return "True"
    else: return "False"



print(is_perfect(6))
print(is_perfect(7))
print(is_perfect(28))
print(is_perfect(30))

#3.23. Anagram
def anagram(str1,str2):
    emp_dict={}
    emp_dict_2={}

    for i in str1:
        if i in emp_dict:
            count=emp_dict[i]
            emp_dict[i]=count+1
        else:
            emp_dict[i]=1

    for j in str2:
        if j in emp_dict_2:
            count=emp_dict_2[j]
            emp_dict_2[j]=count+1
        else:
            emp_dict_2[j]=1
        
    
    if  emp_dict== emp_dict_2: return "True"
    else: return "False"
    

print(anagram('palm', 'lamp'))
print(anagram('hello', 'olla'))