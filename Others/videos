# -*- coding: utf-8 -*-
"""VİDEOS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gN_--ISbWYaQx4G43vigceukTH2KxTJV
"""



a = int(input())
if a < 100 : print(a,"less than 100")
else : print(a,"is not less than 100")
if a%2==0:
  b = 3
  print("a is even")
else:
  b=5
  print("a is odd")

x = -82
list = [x**3] for

n= 326
g = int(input("guess the number"))
while g!=n:
  print("wrong guess")
  g = int(input("guess another number"))
print("you won")

n= 10001
for x in range(2,n//2,1):
  if n%x==0:
    print("Number is not prime")
    break

#Lucky Division-4-7-almost lucky #WEEK5 3/4
lucky_num=[4,7,44,47,74,77,444,447,474,477,744,747,774,777]
n = int(input("Enter a 3 digit positive number"))

isAlmostLucky = False

for x in lucky_num:
    if n==x and n%x==0:
        print(n, "is an almost lucky number")
        isAlmostLucky=True
        break
    
if isAlmostLucky==False :
    print(n,"is not an almost lucky number")

#Big Brother Weight #WEEK5 3/4
small=int(input("enter small"))
b=int(input("enter b"))
year = 0
while small>b:
    print(" small should be less or equal to b")
    small=int(input("enter small"))
    b=int(input("enter b"))
while small<=b:
    year +=1
    small*=3
    b*=2
print(year)

# #Prime factor #WEEK 5  4/4
# n=int(input("enter positive integer"))

# p = 2
# prime_factors=[]
# while p*p<=n:
#     while n>0 and n%p==0:
#             if  not p in prime_factors:
#                 prime_factors.append(p)
#                 n=n//p
#     p=p+1

# if n>1 and n not in prime_factors:
#     prime_factors += [n]
# print(prime_factors)

##7 den fazla 0 ya da 1 yanyanaysa tehlikel
f = input("Enter a string composed of 1s and 0s :")

prev="-"
cnt= 1
isDangerous= False
for x in f:
    if not x==prev:
        prev=x
        cnt=1
    else:
        cnt += 1
        if cnt==7:
            isDangerous= True
            break
if isDangerous:
    print("It is dangerous")
else:
    print("It is NOT dangerous")

# FUNCTIONS-W  3/4
def swap(my_list,ind1,ind2):
    tmp=my_list[ind1]
    my_list[ind1]=my_list[ind2]
    my_list[ind2]=tmp

def find_min_ıdx(my_list):
    if len(my_list)<2: return 0  
    
    current_min=my_list[0]
    min_index=0
    for i in range(len(my_list)):
        if my_list[i]<current_min:
            current_min=my_list[i]
            min_index=i
    return min_index

def sort(my_list):
    for i in range(len(my_list)):
        min_index=find_min_ıdx(my_list[i:])
        swap(my_list,i+min_index,i)
import random


liste=[random.randrange(1000) for i in range(100)]
print("Before sorting:",liste)
sort(liste)
print(liste)

#Fuction W7  4/4
def f(n):
    
    if n==0:return 1
    else:return n*f(n-1)

print(f(12))

##

#fUNCTİON-RECURSION  W7 4/4
def swap(my_list,ind1,ind2):
    tmp=my_list[ind1]
    my_list[ind1]=my_list[ind2]
    my_list[ind2]=tmp

##REURSIVE FUNCTIONS REQUIRES MORE TIME AND MEMORY
def find_min_recursivve(my_list):
    if len(my_list)<2: return 0
    x = find_min_recursivve(my_list[1::])
    if my_list[0]<my_list[x+1]: return 0 
    else:return x+1

def find_min_ıdx(my_list):
    if len(my_list)<2: return 0  
    
    current_min=my_list[0]
    min_index=0
    for i in range(len(my_list)):
        if my_list[i]<current_min:
            current_min=my_list[i]
            min_index=i
    return min_index

def sort(my_list):
    for i in range(len(my_list)):
        min_index=find_min_recursivve(my_list[i:])
        swap(my_list,i+min_index,i)
import random


liste=[random.randrange(1000) for i in range(100)]
print("Before sorting:",liste)
sort(liste)
print(liste)

#OOP/W10
import math 
class Rational:
    def __init__(self,n,d):
        if d==0:
            raise ZeroDivissionError
        self.num=n
        self.den=d
        self.simplify()
    
    def simplify(self):
        if self.num==0:
            self.den=1
            return
        gcd =math.gcd(self.num,self.den)
        
        if self.den<0:
            self.den*=-1
            sel.num*=-1

        self.num=self.num//gcd
        self.den=self.den//gcd

    def __str__(self):
        return "{}/{}".format(self.num,self.den)

    def __mul__(self,rhs):
        retval=Rational(self.num*rhs.num,self.den*rhs.den)
        return retval

    def __add__(self,rhs):
        retval=Rational(self.num*rhs.den+self.den*rhs.num,rhs.den*self.den)
        return retval

    def __eq__(self,rhs):
        return self.num*rhs.den==self.den*rhs.num

a=Rational(3,9)
print(a)
b = Rational(16, 24)
print(a, b, a*b+b*a)
print( a+b == Rational(1, 1))
