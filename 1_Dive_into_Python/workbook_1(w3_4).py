# -*- coding: utf-8 -*-
"""Workbook-1(W3-4).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tPVauVUSoW7-q_q3uH0HVfkERpsyJZLE
"""

#1.22#



#1.1 Debt
total=3000*(1.02**6)
mountly=total/6
print ("{:.2f}".format(mountly))

#1.2
main_money=float(input("main money"))
total_debt=main_money*1.02**6
mountly=total_debt/6
print("{:.2f}".format(mountly))

#1.3 Division
intx = int(input("1.integer"))
inty = int(input("2.integer"))
division = intx//inty
remainder = intx%inty
print(division)
print(remainder)

#1.4.Greating
name = input("Hello, what is your name?")
print("Nice to meet you,",name)

#1.5.Headphones
price = int(input())
tax = 0.2 * price
print("{:.2f}".format(tax))

#1.6.Conflict of Metrics
distance_mil = int(input("distance in mile"))
speed_km = int(input("speed in km/s"))
distance_km = distance_mil*1.6
time_hour=distance_km/speed_km
time_min = 60*time_hour
print("{:.2f}".format(time_min))

#1.7.LCD Shipment
lcd = int(input("lcd"))
ink = int(input("ink"))
#lcd-w = 63
#ink-w = 30
t_w_lcd = 63*(lcd)
t_w_ink = 30*ink
print("Total weight of the LCDs",(t_w_lcd))
print("Total weight of the inks",(t_w_ink))

#1.8.Jogging at Devrim
speed1 = float(input())
duration1 = float(input())
speed2 = float(input())
duration2 = float(input())
speed3 = float(input())
duration3 = float(input())
speed4 = float(input())
duration4 = float(input())
len_lap= float(input())
total_m= speed1*duration1+speed2*duration2+speed3*duration3+speed4*duration4
tur= total_m/len_lap
print("{:.1f}".format(tur))

#1.9.Tiling the Floor
from math import *
width = int(input())
length = int(input())
print(gcd(width,length))

#1.10. Tiling the Floor with Minimum Tiles
from math import *
width = int(input())
length = int(input())
kenar = gcd(width,length)
num1 = width/kenar
num2 = length/kenar
print(round(num1*num2))

#1.11. Movie Festival
n = int(input("hours"))
print ((11+n)%24)

#1.12. Exercise: Circle and Sphere
r = float(input("r"))
area = pi*r**2
volume = 4/3*pi*r**3
print("area:","{:.2f}".format(area))
print("volume:","{:.2f}".format(volume))

#1.13. Reflection Point
qx=int(input())
qy=int(input())
px=int(input())
py=int(input())

mx = (qx+px)/2
my = (qy+py)/2
rx = px+(px-qx)
ry = py+(py-qy)
print (mx,",",my,"and",rx,",",ry)
print ("{:.2f}".format(mx))
print ("{:.2f}".format(my))
print ("{:.2f}".format(rx))
print ("{:.2f}".format(ry))

#1.14. Exercise: BMI 
h = int(input("height cm"))
h_m=h/100
w = int(input("weight km"))
BMI = w/(h_m**2)
bmı = round(BMI)
print(bmı)

#1.15. Exercise: Distance between Circles
Ax =int(input())
Ay =int(input())
Ar =int(input())
Bx =int(input())
By =int(input())
Br =int(input())

center_dist=sqrt((Ax-Bx)**2+(Ay-By)**2)
dist = center_dist-Ar-Br
print("{:.2f}".format(dist))

#1.16. Cube Extraction
m = int(input())
n = int(input())
area= 4*(m**2)+4*(n**2)+2*(m**2-n**2)
print(area)

#1.17. Pool
faf1 = int(input())
faf2 = int(input())
faf3 = int(input())
fae4 = int(input())
fae5 = int(input())
d_fae4 = int(input())
d_fae5 = int(input())
l = int(input())
w = int(input())
d = int(input())

t1= (d-d_fae4*l*w)/(faf1+faf2+faf3)
t2 =((d_fae4-d_fae5)*l*w)/(faf1+faf2+faf3-fae4)
t3 =((d_fae5)*l*w)/(faf1+faf2+faf3-fae4-fae5)
print(t1+t2+t3)

#1.18. Exercise: Django
n = int(input("criminals"))
m = int(input("budget"))
gain = n*(n+1)/2*100
lost = n*m
profit = gain-lost
print(round(profit))

#1.19. Vector
x1 = int(input())
y1 = int(input())
x2 = int(input())
y2 = int(input())
x3 = int(input())
y3 = int(input())
p1 =(x1,y1)
p2 =(x2,y2)
p3 =(x3,y3)

v1 =(p1[0]+p2[0],p1[1]+p2[1])
print(v1)
v2 =(v1[0]-p3[0],v1[1]-p3[1])
print(v2)

#1.20. Slogan
slogan = input()
print("than" in slogan)
print(slogan[:20]+"e"+slogan[21:])

#1.21. Exercise: Grading in CENG314
g1 = int(input())
g2 = int(input())
g3 = int(input())
g4 = int(input())
g5 = int(input())

grades=[g1,g2,g3,g4,g5]
lowest = min(grades)
final = (g1+g2+g3+g4+g5-lowest)/8
print(round(final,1))

#1.22. Exercise: Fuel Tank
capacity=int(input("L"))
consumption=int(input("100 l/km"))
length = int(input("km"))
from math import *

need_fuel=length*consumption/100
depo=need_fuel//capacity
kalan=capacity*(depo+1)-need_fuel

if kalan==capacity:
  depo=depo-1
  kalan=0.00
else:
  pass

print(int(depo))
print(kalan)
 
######OLMADI-SON DURUM ICIN

#1.23. Tuples and Lists
original_tuple=eval(input("input a tuple"))
index,new_num=eval(input("input change"))

l = list(original_tuple)
l[index]= new_num
new_tuple=tuple(l)
print(new_tuple)

#1.24. Inner Elements
num_list= eval(input("input the list"))
m = int(input("m"))
length=len(num_list)
#a to b
a=int((length-m)/2)
b=a+m
result=num_list[a:b]
print(result)

#1.25. Lego
l = eval(input("input the list"))
a = int(input("a"))
b = int(input("b"))
l [a-1:b]=[0]*(b-a+1)
print(l)

#1.26. Dictionaries
stA_ID = int(input())
stA_mt = float(input())
stA_final = float(input())
stB_ID = int(input())
stB_mt = float(input())
stB_final = float(input())
stC_ID = int(input())
stC_mt = float(input())
stC_final = float(input())
stXX_ID = int(input())

dict = {stA_ID:(stA_mt,stA_final),
        stB_ID:(stB_mt,stB_final),
        stC_ID:(stC_mt,stC_final)}
nots = dict[stXX_ID]
not_list = list(nots)
avg = (not_list[0]+not_list[1])/2
print("{:.1f}".format(avg))

#kıtap taki çözüm
# db = dict()

# student_id = int(input())
# midterm = float(input())
# final = float(input())
# db[student_id] = (midterm, final)

# student_id = int(input())
# midterm = float(input())
# final = float(input())
# db[student_id] = (midterm, final)

# student_id = int(input())
# midterm = float(input())
# final = float(input())
# db[student_id] = (midterm, final)

# student_id = int(input())

# (midterm, final) = db[student_id]   # notice the tuple matching
# average = (midterm + final) / 2
# print("{:.f}".format(average))

#1.27. Exercise: Minimum and Maximum of Three 
num_list=[]
a = int(input())
b = int(input())
c = int(input())

num_list.extend([a,b,c])
min_num = min(num_list)
max_num = max(num_list)
set_num = set(num_list)
set_num.remove(min_num)
set_num.remove(max_num)
mid_list = list(set_num)
middle_num = mid_list[0]
print(min_num,middle_num,max_num)