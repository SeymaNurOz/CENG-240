# -*- coding: utf-8 -*-
"""Workbook4-w10-OOP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1laHTAkXvum7vyLWl6omTtXrQRdz-M3Zb
"""



#4.1. Broken Watch 
def is_time_valid(str_time):
    lis=str_time.split(".")
    check1=False
    check2=False
    if len(lis)!=2:return "False"
    # print(int(lis[0]))
    # print(int(lis[1]))
    # if int(lis[0])>=0 and int(lis[0])<=24:check1=True
    # if int(lis[1])>=0 and int(lis[1])<=60: check2=True
    if lis[0]>="00" and lis[0]<="24":check1=True
    if lis[1]>="00"and lis[1]<="60": check2=True
   
    if check1==True and check2==True:return "True"
    else: return "False"

print(is_time_valid("22.65"))
print(is_time_valid("ten past eleven"))
print(is_time_valid("23.20"))

#4.2. Kindergarten Cipher
def decipher(text,solution):
    for item in solution:
        text=text.replace(item[0],item[1])
    return text


print(decipher("H45k3ll 15 4 g3n3r4l-purpo53, 5t4t1c4lly typ3d, pur3ly funct1on4l progr4mm1ng l4ngu4g3 w1th typ3 1nf3r3nc3 4nd l4zy 3v4lu4t1on.", 
               [("3", "e"), ("4", "a"), ("5", "s"), ("1", "i")]))
print(decipher("APL (nam3d af73r 7h3 b00k A Pr0gramming Languag3) is a pr0gramming languag3 d3v3l0p3d by K3nn37h 3. Iv3rs0n. I7s c3n7ral da7a7yp3 is 7h3 mul7idim3nsi0nal array.", 
               [("7", "t"), ("3", "e"), ("0", "o")]))

#4.3. Exercise: Maximum Occurrence
def maximum_occurrence(num_list):
    max_occ=num_list[0]
    max_occ_adet=num_list.count(num_list[0])
    for item in num_list:
        if num_list.count(item)>max_occ_adet:max_occ=item
    return max_occ

#help(str)



print(maximum_occurrence([1,1,1,0,4,4]))
print(maximum_occurrence([0,3,3,3,1,0]))

#4.4. Reverse Left 
def reverse_left(list_1,num):
    ind=list_1.index(num)
    new_list=list_1[0:ind]
    new_list.reverse()
    new_list.extend(list_1[ind:])
    return new_list
    



print(reverse_left([8,1,4,5,6,6,3,2], 6))
#help(list)
print(reverse_left([64, 51, 77, 34, 77, 39, 57, 67, 58, 63, 51], 39))

#4.5. Shopping List
def readable(mixed_str):
    splitted_list=mixed_str.split(",")
    new_list=[]
    for item in splitted_list:
        x=item.lower()
        y=x.strip()
        print(y)
        new_list.append(y)
        
print(readable("LemOn,   gaRlic, PASta"))
#help(str)
readable("CheeSe, cHeesE,    CHEESE")

#4.6. Exercise: Arimu and Hats 
def buy_hats(hat_list,money):
    hat_list.sort()
    i=0
    
    while money>0:
        i+=1
        if i==len(hat_list):
            break
        money-=hat_list[i]
    return i


print(buy_hats([12, 3, 7, 5, 4, 8], 12))
print(buy_hats([4, 3, 6, 2, 5, 5], 27))

#4.7. Is Diagonal
def is_diagonal(matrix):
    check=True
    for i in range(len(matrix)):
        for j in range(len(matrix[0])):
            if i!=j:
                if matrix[i][j]!=0:
                    check=False


    if check==False:return False
    if check==True:return True

print(is_diagonal([[1,0,0],[0,1,0],[0,0,1]]))
print(is_diagonal([[1,1,1],[2,4,0],[3,3,3]]))

#4.8. Capitalize Sentences
def capitalize_sentences(string):
    first=string
    seperators=[".","!","?"]
    final_str=""
   
    for sep in seperators:
        string_list=string.split(sep)
        string_list_n=[]
        for each_part in string_list:
            each_part=each_part.strip()
            # print(each_part)
            if len(each_part)>0:
                part1=each_part[0].upper()
                # print(part1)
                part2=each_part[1:]
                string_list_n+=[part1+part2]
        string=sep.join(string_list_n)
           
    return string+first[-1]

#help(str)
print(capitalize_sentences('lorem. ipsum? dolor sit amet, consectetur! adipiscing elit.'))
print(capitalize_sentences('string methods are really useful in Python! you need to know them to succeed in CENG240.'))

#4.9. Exercise: Database Recovery
def reinstall(old_string):
    empt_dict={}
    list_1=old_string.split(" |=| ")
    for i in range(len(list_1)):
        if i==0:list_1[0]=list_1[i][2:]
        if i==len(list_1)-1:
            list_1[i]=list_1[i][:-2]
        
        list_2=list_1[i].split(":")
        for j in range(len(list_2)):
            if j%2==0:
                keys=list_2[j].lower()
                keys=keys[0].upper()+keys[1:]
                empt_dict[keys]=int(list_2[j+1])
    return empt_dict
        
##help(str)
print(reinstall("| ahmet : 16 |=| Mehmet : 19 |=| selin : 32 |=| PINAR : 8 |"))
print(reinstall("| SiLa : 2 |=| AbDuLlAh : 28 |=| PeLIN : 49 |=| PolaT : 99 |"))

#4.10. Single Sorted Copy
def single_sorted_copy(num_list):
    num_list.sort()
    num_set=set(num_list)
    new_list=list(num_set)
    return new_list
# help(list)
print(single_sorted_copy([3, 3, 2, 2, 1, 1]))
print(single_sorted_copy([1, 3, 2, 2, 1, 1, 4]))