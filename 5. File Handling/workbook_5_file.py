# -*- coding: utf-8 -*-
"""Workbook 5-file.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ygKpBGPNLrvTz7u0rJ-zWjeL02v6r2Nj
"""



# #5.1. Average Weight of Deliveries
def average_weight(file_name):
    flr=open("input.txt","r")
    num_list=[]
    new_list=[]
    nextline=flr.readline()
    while nextline!="":
        nextline=nextline.strip("\n")
        nums=nextline.split()
        for num in nums:
            num=int(num)
            num_list.append(num)
        nextline=flr.readline()
    flr.close()
    # print(num_list)
    # print(type(num_list[0]))
    for i in filter(range_check,num_list):
        new_list.append(i)
    # print(new_list)
    # print(type(new_list[0]))
    sum=0
    for num in new_list:
        sum+=num
    avarage=sum/len(new_list)
    if len(num_list)==0:return 0
    else: return avarage
    




def range_check(num):
    if num>=45 and num<=125:return num
    else:return None
    # if num in range[45,125]:return num

fl=open("input.txt","w")
fl.write("""61 49 92 159 212 257 107 320
    237 282 354 240 120 330 243
    95 113 300 114 271
    191 303 396 117 175 350""")
fl.close()

x=average_weight("input.txt")
print(x)

#5.2. Evaluate Attendees
def evaluate_attendees(key_file,ans_file):
    key_list=[]
    key=open("key.txt","r")
    line=key.readline()
    key_list=line.split()
    key.close()
    # print(key_list)

    ans_dict={}
    ans=open("attendees.txt","r")
    nextline=ans.readline()
    while nextline!="":
        at_list=nextline.split()
        # print(at_list)
        nextline=ans.readline()
        ans_dict[at_list[0]]=at_list[1:]
    # print(ans_dict)
    ans.close()

    return_list=[]
    for attendee in ans_dict:
        correct=0
        wrong=0
        for i in range(len(key_list)):
            if ans_dict[attendee][i]==key_list[i]:correct+=1
            else:wrong+=1
        point=correct-0.25*wrong
        return_list.append((attendee,point))
    sorted_list=sorted(return_list,key=lambda item:item[1],reverse=True )

    return sorted_list
        



# help(sorted)
key=open("key.txt","w")
key.write("A B A B C")
key.close()

ans=open("attendees.txt","w")
ans.write("""Jenna A A A A A
    Tracy D E D E A
    Liz A B A B E
    Lutz A B A D D
    Toofer E B A B C
    Frank E E E E E""")

sonuc=evaluate_attendees("key.txt","attendees.txt")
print(sonuc)
# Return Value:
#     [('Liz',3.75),('Toofer',3.75),('Lutz',2.5),('Jenna',1.25),('Tracy',-1.25),('Frank',-1.25)]

#5.3. Exercise: Grade Student

def grade_student(answer_key,student):
    grade=0
    key_list=[]
    key=open("answer_key.txt","r")
    nextline=key.readline()
    while nextline!="":
        x=nextline.split()
        key_list+=[x]
        nextline=key.readline()
    key.close()
    # print(key_list)

    student_list=[]
    student=open("student.txt","r")
    nl=student.readline()
    while nl!="":
        y=nl.split()
        student_list+=[y]
        nl=student.readline()
    student.close()
    # print(student_list)

    for i in range(len(key_list)):
        if key_list[i][1]==student_list[i][1]:grade+=int(key_list[i][2])

    return grade



key=open("answer_key.txt","w")
key.write("""1 A 5
    2 C 15
    3 A 10
    4 B 5
    5 D 5
    6 C 15
    7 C 15
    8 A 10
    9 D 15
    10 C 5""")
key.close()

student=open("student.txt","w")
student.write("""1 A
    2 C
    3 D
    4 A
    5 C
    6 C
    7 D
    8 A
    9 D
    10 C""")

gr=grade_student("answer_key.txt", "student.txt")
print(gr)

#5.4. Cheapest Flour
def cheapest_flour(inp, out):
    price_list=[]


    inp=open("input.txt","r")
    nextline=inp.readline()
    while nextline!="":
        xyz=nextline.split()
        price_list+=[int(xyz[0])/int(xyz[1])]
        nextline=inp.readline()
    inp.close()

    sr_list=sorted(price_list,reverse=True)
    out=open("output.txt","w")
    for i in sr_list:
        x=str(i)
        out.write("{}".format(x))
        out.write("\n")
        # print(x)
    out.close()


input=open("input.txt","w")
input.write("""12 3
    25 2
    15 6
    23 8
    11 2""")
input.close()

cheapest_flour("input.txt", "output.txt")

out=open("output.txt","r")
content=out.read()
print(content)

#5.5. Exercise: Pass or Fail
def check_grade(grade):
    if grade<60: return "Fail"
    else: return "Pass"


def pass_or_fail(input,output):
        inp=open("input.txt","r")
        nextline=inp.readline()
        output=open("output.txt","w")
        while nextline!="":
            li=nextline.split(",")
            grade=0.3*int(li[1])+0.3*int(li[2])+0.4*int(li[3])
            output.write(li[0]+","+check_grade(grade)+"\n")  
            nextline=inp.readline()  
        inp.close()
        output.close()


    
input=open("input.txt","w")
input.write("""Gorkem Yildiz,70,90,50
Naz Kaya,100,80,20
Bilgin Irmak,60,55,63
Aleyna Catak,80,60,50
Bayram Durak,70,30,90""")
input.close()

pass_or_fail("input.txt", "output.txt")


out=open("output.txt","r")
content=out.read()
print(content)



# Sample function call:
#     pass_or_fail("input.txt", "output.txt")

# Content of the file "input.txt":


# Content of the file "output.txt" after function call:
#     Bilgin Irmak,Fail
#     Aleyna Ã‡atak,Pass
#     Bayram Durak,Pass

#5.6. Delete Answers from the Exam

def delete_answers(file_name):
    q=open(file_name,"r")
    n_q=open("new_questions.txt","w")
    nextline=q.readline()
    
    i=0
    while nextline!="":
        nextline=q.readline()
        # nextline=nextline.strip("\n")
        # print(nextline)
        i+=1
        if i%6==0:
           pass
        else:
            n_q.write(nextline)
            # print(nextline)

    q.close()
    n_q.close()


questions=open("questions.txt","w")
questions.write("""
    Q1: What does RAM stand for?
    A) Right Access Memory
    B) Real Actual Memory
    C) Read Access Memory
    D) Random Access Memory
    Answer is D
    Q2: What is the electronic circuitry within a computer that executes instructions that make up a computer program?
    A) CPU
    B) RAM
    C) ROM
    D) Motherboard
    Answer is A""")
questions.close()

delete_answers("questions.txt")

output_file=open("new_questions.txt","r")
x=output_file.read()
print(x)

# 5.7. Exercise: Database Migration


def format_for_migration(input, output):
    input=open(input,"r")
    output=open("output.txt","w")
    nextline=input.readline()
    nextline=nextline.strip()
    titles=nextline.split(",")
    
    nextline=input.readline()
    nextline=nextline.strip()
    count=1
    while nextline!="":
        count+=1
        seperated=nextline.split(",")
        new_list=[]
        for i in range(len(seperated)):
            x=":".join([titles[i],seperated[i]])
            
            new_list+=[x]
        output.write(",".join(new_list)+"\n")
             
        
        nextline=input.readline()
        nextline=nextline.strip()
    


    input.close()
    output.close()
    return count-1

input=open("input.txt","w")
input.write("""    Actor,EpisodeCount,LastOccurence
    Kenan Thompson,353,2020
    Seth Meyers,255,2018
    Fred Armisen,238,2020
    Kate McKinnon,179,2020
    Cecily Strong,174,2020
    Bill Hader,167,2020
    Maya Rudolp,166,2020
    Will Forte,159,2016
    Tina Fey,154,2020
    Tracy Morgan,154,2019
    Amy Poehler,153,2020
    Will Ferrell,151,2019
    Rachel Dracht,150,2020
    Colin Jost,149,2020
    Kristen Wiig,145,2020
    Andy Samberg,144,2018
    Michael Che,132,2020
    Pete Davidson,132,2020
    Alec Baldwin,65,2020
    Julia Louis-Dreyfus,60,2016
    Jenny Slate,22,2010
    Steve Martin,32,2019
    Martin Short,28,2020
    Nancy Carell,22,2018
    Steve Carell,18,2018
    Tom Hanks,18,2020
    John Mulaney,14,2020""")


input.close()
output=open("output.txt","w")
output.close()

print(format_for_migration("input.txt", "output.txt"))
output=open("output.txt","r")
x=output.read()
print(x)

# Return value:
#     27

#5.8. Append Reverse

def append_reverse(file_name):
    input=open(file_name,"r")
    nextline=input.readline()
    tp_list=[]
    person_list=[]
    while nextline!="":
        nextline=nextline.strip("\n")
        name_surname=nextline.split()
        (name,surname)=name_surname[0],name_surname[1]
        person_list+=["\n"+surname+" "+name]
        tp=(name,surname)
        tp_list.append(tp)
        # print((name,surname))
        nextline=input.readline()
        
    input.close()
    
    output=open(file_name,"a")
    for person in person_list:
        output.write(person)
    input.close()
       
    return tp_list
   
input=open("input.txt","w")
input.write("""Lewis Hamilton
Nicholas Latifi
Charles Leclerc
Esteban Ocon
Kimi Raikkonen""")
input.close()

print(append_reverse("input.txt"))

son_file=input=open("input.txt","r")
context=son_file.read()
print(context)
# Return value:
#     [('Lewis', 'Hamilton'), ('Nicholas', 'Latifi'), ('Charles', 'Leclerc'), ('Esteban', 'Ocon'), ('Kimi', 'Raikkonen')]



#5.10. Fix Operation File

def fix_operation_file(input_file,output_file):
    input=open(input_file,"r")
    output=open(output_file,"w")
    line_list=[]
    nextline=input.readline()
    while nextline!="":
        nextline=nextline.strip("\n")
        line_list+=[nextline.strip("\n")]

        nextline=input.readline()
    # print(line_list)
    return_list= []
    for i in range(len(line_list)):
        if i%3==0:
            new_line=line_list[i]+line_list[i+1]+line_list[i+2]+"\n"
            output.write(new_line)
            calculation=eval(new_line)
            return_list.append(calculation)
        

    input.close()
    output.close()
    return return_list




input=open("input.txt","w")
input.write("""3
+
5
6
*
7
2
/
1
18
-
9""")
input.close()



print(fix_operation_file("input.txt", "output.txt"))

output=open("output.txt","r")
context=output.read()
print(context)
output.close()

# Content of the file "output.txt" after function call:
#   3+5
#   6*7
#   2/1
#   18-9
# Return value:
#   [8, 42, 2.0, 9]